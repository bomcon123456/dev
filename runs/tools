#!/usr/bin/env bash

set -e

mkdir -p ~/.local/bin
LOCAL_BIN="$HOME/.local/bin"
TMP_DIR="/tmp/cli-install"

# Check command
has_command() {
    command -v "$1" &>/dev/null
}

# Check for root privileges
has_root() {
    sudo -n true 2>/dev/null
}

# fd-find
install_fd() {
    if has_command fd; then
        echo "✔ fd is already installed"
        return
    fi

    echo "Installing fd..."
    echo "Installing fd without root..."
    cd "$TMP_DIR"
    LATEST=$(curl -s https://api.github.com/repos/sharkdp/fd/releases/latest | grep tag_name | cut -d '"' -f 4)
    ARCH=$(uname -m)
    case "$ARCH" in
    x86_64) ARCH_TYPE="x86_64-unknown-linux-gnu" ;;
    aarch64 | arm64) ARCH_TYPE="aarch64-unknown-linux-gnu" ;;
    *)
        echo "Unsupported_arch: $ARCH"
        return 1
        ;;
    esac
    URL="https://github.com/sharkdp/fd/releases/download/${LATEST}/fd-${LATEST}-${ARCH_TYPE}.tar.gz"
    curl -LO "$URL"
    tar -xf fd-${LATEST}-${ARCH_TYPE}.tar.gz
    cp "fd-${LATEST}-${ARCH_TYPE}/fd" "$LOCAL_BIN"
    chmod +x "$LOCAL_BIN/fd"
    echo "✔ fd installed to $LOCAL_BIN"
}

# bat
install_bat() {
    if has_command bat; then
        echo "✔ bat is already installed"
        return
    fi

    echo "Installing bat..."
    echo "Installing bat without root..."
    cd "$TMP_DIR"
    LATEST=$(curl -s https://api.github.com/repos/sharkdp/bat/releases/latest | grep tag_name | cut -d '"' -f 4)
    ARCH=$(uname -m)
    case "$ARCH" in
    x86_64) ARCH_TYPE="x86_64-unknown-linux-gnu" ;;
    aarch64 | arm64) ARCH_TYPE="aarch64-unknown-linux-gnu" ;;
    *)
        echo "Unsupported arch: $ARCH"
        return 1
        ;;
    esac
    URL="https://github.com/sharkdp/bat/releases/download/${LATEST}/bat-${LATEST}-${ARCH_TYPE}.tar.gz"
    curl -LO "$URL"
    tar -xf bat-${LATEST}-${ARCH_TYPE}.tar.gz
    cp "bat-${LATEST}-${ARCH_TYPE}/bat" "$LOCAL_BIN"
    chmod +x "$LOCAL_BIN/bat"
    echo "✔ bat installed to $LOCAL_BIN"
}

# ripgrep (rg)
install_rg() {
    if has_command rg; then
        echo "✔ ripgrep is already installed"
        return
    fi

    echo "Installing ripgrep..."
    echo "Installing ripgrep without root..."
    cd "$TMP_DIR"
    LATEST=$(curl -s https://api.github.com/repos/BurntSushi/ripgrep/releases/latest | grep tag_name | cut -d '"' -f 4)
    ARCH=$(uname -m)
    case "$ARCH" in
    x86_64) ARCH_TYPE="x86_64-unknown-linux-musl" ;;
    aarch64 | arm64) ARCH_TYPE="aarch64-unknown-linux-musl" ;;
    *)
        echo "Unsupported arch: $ARCH"
        return 1
        ;;
    esac
    URL="https://github.com/BurntSushi/ripgrep/releases/download/${LATEST}/ripgrep-${LATEST}-${ARCH_TYPE}.tar.gz"
    curl -LO "$URL"
    tar -xf ripgrep-${LATEST}-${ARCH_TYPE}.tar.gz
    cp "ripgrep-${LATEST}-${ARCH_TYPE}/rg" "$LOCAL_BIN"
    chmod +x "$LOCAL_BIN/rg"
    echo "✔ ripgrep installed to $LOCAL_BIN"
}

# Neovim (nvim)
install_nvim() {
    if has_command nvim; then
        echo "✔ nvim is already installed"
        return
    fi

    echo "Installing nvim..."

    # Create permanent installation directory
    NVIM_INSTALL_DIR="$HOME/.local/share/nvim"
    mkdir -p "$NVIM_INSTALL_DIR"

    cd "$TMP_DIR"

    # Get latest release info
    echo "Fetching latest nvim release..."
    LATEST=$(curl -s https://api.github.com/repos/neovim/neovim/releases/latest | grep tag_name | cut -d '"' -f 4)

    if [ -z "$LATEST" ]; then
        echo "✗ Failed to fetch latest nvim version"
        return 1
    fi

    URL="https://github.com/neovim/neovim/releases/download/${LATEST}/nvim-linux-x86_64.tar.gz"
    TARBALL="nvim-linux-x86_64.tar.gz"

    echo "Downloading nvim ${LATEST}..."
    curl -LO "$URL"

    if [ ! -f "$TARBALL" ]; then
        echo "✗ Failed to download nvim"
        return 1
    fi

    # Extract to permanent location
    echo "Extracting nvim..."
    tar -xzf "$TARBALL"

    # Remove old installation if exists
    if [ -d "$NVIM_INSTALL_DIR/nvim-linux-x86_64" ]; then
        rm -rf "$NVIM_INSTALL_DIR/nvim-linux-x86_64"
    fi

    # Move to permanent location
    mv nvim-linux-x86_64 "$NVIM_INSTALL_DIR/"

    # Create symlink in local bin
    mkdir -p "$LOCAL_BIN"
    ln -sf "$NVIM_INSTALL_DIR/nvim-linux-x86_64/bin/nvim" "$LOCAL_BIN/nvim"

    # Clean up
    rm -f "$TARBALL"

    # Verify installation
    if [ -x "$LOCAL_BIN/nvim" ]; then
        echo "✔ nvim installed successfully"
        echo "  Location: $NVIM_INSTALL_DIR/nvim-linux-x86_64"
        echo "  Symlink: $LOCAL_BIN/nvim"
    else
        echo "✗ nvim installation failed"
        return 1
    fi
}

install_eza() {
    if has_command eza; then
        echo "✔ eza is already installed"
        return
    fi

    echo "Installing eza..."
    if ! has_command eza; then
        echo "Installing eza without root..."
        cd "$TMP_DIR"
        LATEST=$(curl -s https://api.github.com/repos/eza-community/eza/releases/latest | grep tag_name | cut -d '"' -f 4)
        ARCH=$(uname -m)
        case "$ARCH" in
        x86_64) ARCH_TYPE="x86_64-unknown-linux-gnu" ;;
        aarch64 | arm64) ARCH_TYPE="aarch64-unknown-linux-gnu" ;;
        *) echo "Unsupported arch: $ARCH" && return 1 ;;
        esac

        URL="https://github.com/eza-community/eza/releases/download/${LATEST}/eza_${ARCH_TYPE}.tar.gz"

        curl -LO "$URL"
        tar -xzf "eza_${ARCH_TYPE}.tar.gz"

        if [ -f "eza" ]; then
            cp eza "$LOCAL_BIN"
        else
            chmod +x eza*/eza
            cp eza*/eza "$LOCAL_BIN"
        fi

        chmod +x "$LOCAL_BIN/eza"
        mv "$LOCAL_BIN/eza" "$LOCAL_BIN/eza"
        echo "✔ eza installed to $LOCAL_BIN"
    fi
}

install_yazi() {
    if has_command yazi; then
        echo "✔ yazi is already installed"
        return
    fi

    echo "Installing yazi..."
    cd "$TMP_DIR"
    LATEST=$(curl -s https://api.github.com/repos/sxyazi/yazi/releases/latest | grep tag_name | cut -d '"' -f 4)
    ARCH=$(uname -m)
    case "$ARCH" in
    x86_64) ARCH_TYPE="x86_64-unknown-linux-gnu" ;;
    aarch64 | arm64) ARCH_TYPE="aarch64-unknown-linux-gnu" ;;
    *) echo "Unsupported arch: $ARCH" && return 1 ;;
    esac

    URL="https://github.com/sxyazi/yazi/releases/download/${LATEST}/yazi-${ARCH_TYPE}.zip"
    curl -LO "$URL"
    unzip -q yazi-${ARCH_TYPE}.zip
    cp "yazi-${ARCH_TYPE}/yazi" "$LOCAL_BIN"
    chmod +x "$LOCAL_BIN/yazi"
    echo "✔ yazi installed to $LOCAL_BIN"
}

install_delta() {
    if has_command delta; then
        echo "✔ delta is already installed"
        return
    fi

    echo "Installing delta..."
    cd "$TMP_DIR"
    LATEST=$(curl -s https://api.github.com/repos/dandavison/delta/releases/latest | grep tag_name | cut -d '"' -f 4)
    ARCH=$(uname -m)
    case "$ARCH" in
    x86_64) ARCH_TYPE="x86_64-unknown-linux-gnu" ;;
    aarch64 | arm64) ARCH_TYPE="aarch64-unknown-linux-gnu" ;;
    *) echo "Unsupported arch: $ARCH" && return 1 ;;
    esac

    URL="https://github.com/dandavison/delta/releases/download/${LATEST}/delta-${LATEST}-${ARCH_TYPE}.tar.gz"
    curl -LO "$URL"
    tar -xf delta-${LATEST}-${ARCH_TYPE}.tar.gz
    cp "delta-${LATEST}-${ARCH_TYPE}/delta" "$LOCAL_BIN"
    chmod +x "$LOCAL_BIN/delta"
    echo "✔ delta installed to $LOCAL_BIN"
}

install_zoxide() {
    if has_command zoxide; then
        echo "✔ zoxide is already installed"
        return
    fi

    echo "Installing zoxide..."
    cd "$TMP_DIR"
    LATEST=$(curl -s https://api.github.com/repos/ajeetdsouza/zoxide/releases/latest | grep tag_name | cut -d '"' -f 4)
    ARCH=$(uname -m)
    case "$ARCH" in
    x86_64) ARCH_TYPE="x86_64-unknown-linux-gnu" ;;
    aarch64 | arm64) ARCH_TYPE="aarch64-unknown-linux-gnu" ;;
    *) echo "Unsupported arch: $ARCH" && return 1 ;;
    esac

    URL="https://github.com/ajeetdsouza/zoxide/releases/download/${LATEST}/zoxide-${LATEST}-${ARCH_TYPE}.zip"
    curl -LO "$URL"
    unzip -q zoxide-${LATEST}-${ARCH_TYPE}.zip
    cp "zoxide-${LATEST}-${ARCH_TYPE}/zoxide" "$LOCAL_BIN"
    chmod +x "$LOCAL_BIN/zoxide"
    echo "✔ zoxide installed to $LOCAL_BIN"
}

install_lazygit() {
    if has_command lazygit; then
        echo "✔ lazygit is already installed"
        return
    fi

    echo "Installing lazygit..."
    cd "$TMP_DIR"
    LATEST=$(curl -s https://api.github.com/repos/jesseduffield/lazygit/releases/latest | grep tag_name | cut -d '"' -f 4)
    ARCH=$(uname -m)
    case "$ARCH" in
    x86_64) ARCH_TYPE="Linux_x86_64" ;;
    aarch64 | arm64) ARCH_TYPE="Linux_arm64" ;;
    *) echo "Unsupported arch: $ARCH" && return 1 ;;
    esac

    URL="https://github.com/jesseduffield/lazygit/releases/download/${LATEST}/lazygit_${LATEST}_${ARCH_TYPE}.tar.gz"
    curl -LO "$URL"
    tar xf lazygit_${LATEST}_${ARCH_TYPE}.tar.gz
    cp lazygit "$LOCAL_BIN"
    chmod +x "$LOCAL_BIN/lazygit"
    echo "✔ lazygit installed to $LOCAL_BIN"
}

##################################################
# Main
##################################################

mkdir -p "$TMP_DIR"
mkdir -p "$LOCAL_BIN"

install_fd
install_bat
install_rg
install_eza
install_yazi
install_delta
install_nvim

echo ""
echo "✅ All tools installed."
echo "➡ Make sure $HOME/.local/bin is in your PATH!"
