#!/usr/bin/env bash
dry_run="0"
YELLOW='\033[33m'
RED='\033[31m'
NC='\033[0m' # No Color

if [ -z "$XDG_CONFIG_HOME" ]; then
    echo "no xdg config set"
    echo "using ~/.config"
    XDG_CONFIG_HOME=$HOME/.config
fi

if [ -z "$DEV_ENV" ]; then
    echo "env var DEV_ENV needs to be present"
    exit 1
fi

if [ -z "$WS" ]; then
    echo "env var WS needs to be present"
    exit 1
fi

is_mac=false
is_linux=false
is_server=false

# Logic based on WS value
case "$WS" in
mac)
    echo "Detected macOS environment via WS=$WS"
    is_mac=true
    ;;
linux)
    echo "Detected Linux environment via WS=$WS"
    is_linux=true
    ;;
server)
    echo "Detected server environment via WS=$WS"
    is_server=true
    ;;
q)
    echo "Detected Q environment via WS=$WS"
    if [ ! -d "workdev" ]; then
        echo "Error: workdev folder does not exist. Please clone it first."
        exit 1
    fi
    is_q=true
    ;;
*)
    echo "Warning: Unknown WS environment value: $WS"
    exit 1
    ;;
esac

if [[ $1 == "-d" || $1 == "--dry" || $1 == "--dry-run" ]]; then
    dry_run="1"
fi

log() {
    if [[ $dry_run == "1" ]]; then
        echo -e "[DRY_RUN]: $1"
    else
        echo -e "$1"
    fi
}

log "env: $DEV_ENV"

update_files() {
    log "copying over files from: $1"
    pushd $1 &>/dev/null
    (
        configs=$(find . -mindepth 1 -maxdepth 1 -type d)
        for c in $configs; do
            directory=${2%/}/${c#./}
            log "    ${RED}removing: rm -rf $directory${NC}"

            if [[ $dry_run == "0" ]]; then
                rm -rf $directory
            fi

            log "    ${YELLOW}copying env: cp $c $2${NC}"
            if [[ $dry_run == "0" ]]; then
                cp -r ./$c $2
            fi
        done

    )
    popd &>/dev/null
}

copy() {
    log "${RED}removing: $2${NC}"
    if [[ $dry_run == "0" ]]; then
        rm $2
    fi
    log "${YELLOW}copying: $1 to $2${NC}"
    if [[ $dry_run == "0" ]]; then
        cp $1 $2
    fi
}

update_files $DEV_ENV/env/.config $XDG_CONFIG_HOME
update_files $DEV_ENV/env/.local $HOME/.local

copy $DEV_ENV/env/.zsh_aliases $HOME/.zsh_aliases
copy $DEV_ENV/env/.zsh_profile $HOME/.zsh_profile
copy $DEV_ENV/env/.zsh_robbyrussell.zsh-theme $HOME/.oh-my-zsh/custom/robbyrussell.zsh-theme
copy $DEV_ENV/env/.zsh_aliases $HOME/.zsh_aliases
copy $DEV_ENV/env/.zshrc $HOME/.zshrc
copy $DEV_ENV/env/.gitconfig $HOME/.gitconfig

if [ "$is_linux" = true ]; then
    echo "Copying linux-specific config..."
    update_files $DEV_ENV/env/.config.linux $XDG_CONFIG_HOME

    copy $DEV_ENV/env/.xprofile $HOME/.xprofile
    copy $DEV_ENV/env/.gitconfig.local.linux $HOME/.gitconfig.local
    copy $DEV_ENV/env/.zshrc.local.linux $HOME/.zshrc.local
elif [ "$is_mac" = true ]; then
    echo "Copying macOS-specific config..."
    update_files $DEV_ENV/env/.config.mac $XDG_CONFIG_HOME

    copy $DEV_ENV/env/.gitconfig.local.mac $HOME/.gitconfig.local
    copy $DEV_ENV/env/.zshrc.local.mac $HOME/.zshrc.local
elif [ "$is_server" = true ]; then
    echo "Copying server-specific config..."
    copy $DEV_ENV/env/.gitconfig.local.linux $HOME/.gitconfig.local
    copy $DEV_ENV/env/.zshrc.local.linux $HOME/.zshrc.local
elif [ "$is_q" = true ]; then
    echo "Copying q-specific config..."
    copy $DEV_ENV/workdev/env/.gitconfig.local $HOME/.gitconfig.local
    copy $DEV_ENV/workdev/env/.zshrc.local $HOME/.zshrc.local
    cp $DEV_ENV/workdev/env/.local/scripts/* $HOME/.local/scripts/
fi

copy $DEV_ENV/dev-env $HOME/.local/scripts/dev-env

mkdir -p $HOME/.local/bin

if [[ $dry_run == "0" ]]; then
    if command -v conda &>/dev/null; then
        echo "Conda found, initializing..."
        conda init zsh
        sed -n '/>>> conda initialize >>>/,/<<< conda initialize <<</p' ~/.zshrc >>~/.zshrc.local
        sed -i '' '/>>> conda initialize >>>/,/<<< conda initialize <<</d' ~/.zshrc
        conda init bash
        sed -n '/>>> conda initialize >>>/,/<<< conda initialize <<</p' ~/.bashrc >>~/.bashrc.local
        sed -i '' '/>>> conda initialize >>>/,/<<< conda initialize <<</d' ~/.zshrc
    else
        echo "Conda not found in PATH. Skipping initialization."
    fi
fi
